// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Constants from "./common/Constants.bs.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Text$BsReactNative from "bs-react-native/src/components/text.bs.js";
import * as View$BsReactNative from "bs-react-native/src/components/view.bs.js";
import * as Style$BsReactNative from "bs-react-native/src/style.bs.js";

function createContainerStyle(type_) {
  var base = Style$BsReactNative.style(/* :: */[
        Style$BsReactNative.flex(1),
        /* :: */[
          Style$BsReactNative.justifyContent(/* Center */2),
          /* :: */[
            Style$BsReactNative.alignItems(/* Center */2),
            /* [] */0
          ]
        ]
      ]);
  var styleBasedOnType = type_ ? Style$BsReactNative.style(/* :: */[
          Style$BsReactNative.backgroundColor(/* String */Block.__(0, [Constants.Color[/* white */3]])),
          /* [] */0
        ]) : Style$BsReactNative.style(/* :: */[
          Style$BsReactNative.backgroundColor(/* String */Block.__(0, [Constants.Color[/* black */1]])),
          /* [] */0
        ]);
  return Style$BsReactNative.flatten(/* array */[
              base,
              styleBasedOnType
            ]);
}

function createTextStyle(type_) {
  var base = Style$BsReactNative.style(/* :: */[
        Style$BsReactNative.fontSize(/* Float */Block.__(0, [12])),
        /* :: */[
          Style$BsReactNative.textAlign(/* Center */3),
          /* :: */[
            Style$BsReactNative.margin(/* Pt */Block.__(0, [10])),
            /* [] */0
          ]
        ]
      ]);
  var styleBasedOnType = type_ ? Style$BsReactNative.style(/* :: */[
          Style$BsReactNative.color(/* String */Block.__(0, [Constants.Color[/* grey */0]])),
          /* [] */0
        ]) : Style$BsReactNative.style(/* :: */[
          Style$BsReactNative.color(/* String */Block.__(0, [Constants.Color[/* darkGrey */2]])),
          /* [] */0
        ]);
  return Style$BsReactNative.flatten(/* array */[
              base,
              styleBasedOnType
            ]);
}

var Styles = /* module */[
  /* createContainerStyle */createContainerStyle,
  /* createTextStyle */createTextStyle
];

var dataType = /* array */[
  /* Light */1,
  /* Dark */0
];

function make(_children) {
  var match = React.useReducer((function (state, action) {
          return action[0];
        }), /* Light */1);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          console.log("clear");
          Curry._1(dispatch, /* ChangeTheme */[Caml_array.caml_array_get(dataType, 1)]);
          return undefined;
        }));
  return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(createContainerStyle(state)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(createTextStyle(state)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Nothing"]))]));
}

var Nothing = /* module */[
  /* Styles */Styles,
  /* dataType */dataType,
  /* make */make
];

var app = make;

export {
  Nothing ,
  app ,
  
}
/* react Not a pure module */
